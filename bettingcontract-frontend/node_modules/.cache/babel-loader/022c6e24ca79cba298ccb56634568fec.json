{"remainingRequest":"/Users/tombeck/Desktop/Tous les folders/SmartContracts/BettingContractProject/bettingcontract-frontend/node_modules/babel-loader/lib/index.js!/Users/tombeck/Desktop/Tous les folders/SmartContracts/BettingContractProject/bettingcontract-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tombeck/Desktop/Tous les folders/SmartContracts/BettingContractProject/bettingcontract-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tombeck/Desktop/Tous les folders/SmartContracts/BettingContractProject/bettingcontract-frontend/src/components/Hello-Page.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tombeck/Desktop/Tous les folders/SmartContracts/BettingContractProject/bettingcontract-frontend/src/components/Hello-Page.vue","mtime":1631191173366},{"path":"/Users/tombeck/Desktop/Tous les folders/SmartContracts/BettingContractProject/bettingcontract-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tombeck/Desktop/Tous les folders/SmartContracts/BettingContractProject/bettingcontract-frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/tombeck/Desktop/Tous les folders/SmartContracts/BettingContractProject/bettingcontract-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tombeck/Desktop/Tous les folders/SmartContracts/BettingContractProject/bettingcontract-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Hello-Page.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class='metamask-info'>\n\n  <button class=\"backGroundColor button connectMetamaskButton\" v-on:click= \"connectButtonMetamask\" id='connectMetamaskButton'>Connect Metamask</button><br><br>\n\n  <h1 class=\"addressInfo\"> Contract: {{this.contractAddress}} </h1>\n  <h1 class=\"addressInfo\"> Account currently selected: {{this.accountSelected}} </h1>\n  <h1 class=\"addressInfo\"> Current balance: {{this.accountBalance}} </h1>\n  <h1 class=\"addressInfo\"> Ids of the bets this account is involved in: {{this.IdOfBetsInvolved}} </h1>\n\n  <h1 class=\"titles\"> Hello :) This is a betting Dapp on blockchain. You can bet with your friends and trusted ones (or with strangers but I strongly don't recommend it)\n    The functionning is pretty simple. Lets say that 2 people wish to bet some cryptocurrencies on blockchain. They need a thirdparty to manage funds until the outcome of the bet is known. There's how it works:\n  </h1><br>\n\n <h1> 1 - Both betters decide who the thirdparty will be. Then, either a better or the thirdparty creates the bet (VERY IMPORTANT: A BET ID WILL BE DISPLAYED. PLEASE KEEP THE ID OF THE BET).</h1>\n <h1> 2 - Then, all users (both betters and the thirdparty) have to approve the bet by inputting the relevant bet Id.</h1>\n <h1> 3 - After that, all betters have to transfer the amount to bet to the thirdparty by inputting the Id of the bet. The funds will be transfered to the thirdparty's account. That is why betters have to choose VERY wisely the thirdparty. The thirdparty has no obligation to send the funds back or to not spend them!</h1>\n <h1> 4 - All the steps mentionned before need to be done BEFORE the outcome of the bet is known. When the outcome of the bet is known, the thirdparty can transfer the funds back to the winner! The bet is then finished!</h1><br><br>\n \n\n <h1 class=\"titles\">Because this betting Dapp takes assets from blockchain, users will need a Metamask Wallet and a valid address! The \"betters\" and the \"thirdparty\" in reality correspond to wallet addresses! On the technical side, there are a few rules to follow to make the process easy. Here they are:</h1><br>\n\n <h1> 1 - If you attempt to do something that does not comply with the functionning of the Dapp, Metamask won't pop up to confirm transaction OR Metamask will warn you that there will be a transaction error due to an exception in the execution of the contract. Please consider that an action has indeed taken place if you click the confirm button of the Metamask PopUp AND Metamask does not warn you of a failure in the execution of the contract.</h1>\n <h1> 2 - Please try to connect only one address at a time on the Dapp. While it should work even if you connect multiple addresses, this may avoid possible unexpected concurrencies. </h1>\n\n\n </div>\n \n</template>\n\n<script>\nimport Web3 from \"web3\";\nimport BettingContract from '../abis/BettingContract.json';\n\nexport default {\n\ndata: () => {\n        return {\n          contractAddress: \"\",\n          accountSelected: \"\",\n          accountBalance: \"\",\n          IdOfBetsInvolved: \"\",\n        }\n    },\n\n\n  name: 'hello-metamask',\n\n  mounted: function () {\n        this.$nextTick(function () {\n            window.setInterval(() => {\n                this.loadInformations();\n                this.getBetsAddress();\n            },100);\n        })\n    },\n\n  methods: {\n\n    async loadInformations(){\n      \n      const netId = window.ethereum.networkVersion;\n      \n      const bettingContractData = BettingContract.networks[netId];\n\n      this.contractAddress = bettingContractData.address;\n\n      const web3 = new Web3(window.ethereum);\n\n      const accounts = await web3.eth.getAccounts();\n      this.accountSelected = accounts[0];\n\n      await web3.eth.getBalance(accounts[0]).then(result => this.accountBalance = (result * 10 ** -18) + \" native token(s)\");\n    },\n\n    async getBetsAddress(){\n\n      const web3 = new Web3(window.ethereum);\n\n      const accounts = await web3.eth.getAccounts();\n\n      var yourAddress = accounts[0];\n\n      var BetIdAssociatedAddress= \"\";\n\n      var lastId;\n      await this.$store.bettingContractAbi.methods.getLastBetId().call().then(function(result){lastId = result});\n\n      var i = 0;\n\n      while(i < lastId) {\n\n        var firstAddress;\n        var secondAddress;\n        var thirdAddress;\n\n        await this.$store.bettingContractAbi.methods.getBetFirstBetter(i).call().then(function(result){firstAddress = (result == yourAddress)});\n\n        await this.$store.bettingContractAbi.methods.getBetSecondtBetter(i).call().then(function(result){secondAddress = (result == yourAddress)});\n\n        await this.$store.bettingContractAbi.methods.getBetThirdParty(i).call().then(function(result){thirdAddress = (result == yourAddress)});\n\n        console.log(firstAddress)\n        console.log(secondAddress)\n        console.log(thirdAddress)\n\n        if(firstAddress || secondAddress || thirdAddress){\n\n          BetIdAssociatedAddress = BetIdAssociatedAddress + \" \" + i + \",\";\n\n        }\n\n        i++;\n      }\n\n      this.IdOfBetsInvolved = BetIdAssociatedAddress;\n\n    },\n\n    async loadWeb3(){\n\n      // Setup Web3 si Metask est présent\n      if(window.ethereum){\n        window.web3 = new Web3(window.ethereum)\n        await window.ethereum.enable()        \n        // Pas sûr de ce que ça fait j'avoue\n      } else if(window.web3){\n        window.web3 = new Web3(window.web3.currentProvider)          \n      } else {\n        // S'affiche s'il n'y a pas de Metamask\n        window.alert('Non-Ethereum browser detected. Please download Metamask')        \n      }\n    \n    },\n\n     connectButtonMetamask: async function (){\n      await this.loadWeb3();\n    },\n\n  \n  }\n\n}\n</script>\n\n<style>\n\n.titles {\n  font-size: 20px;\n  font-family:Arial, Helvetica, sans-serif;\n  color: black;\n  padding:16px;\n  font-weight:bold;\n  box-shadow:2px 2px 6px #888;  \n  text-align:center;\n  display:block;\n  margin:16px;\n}\n\n.connectMetamaskButton{\n  height: 50px; \n  width: 175px; \n}\n\n.addressInfo{\n  color: #60100B;\n}\n\n</style>"],"sourceRoot":"src/components"}]}